version: "3.1"
services:
  app:
    build:
      context: .
      # Within the Dockerfile, we'll give the command to start Flask, so that command doesn't need to be specified here
      dockerfile: Dockerfile
    environment:
      # I'm using this environment variable for the logic in db/mysql_repo.py to change configuration
      #  based on whether the app is running in a virtual environment or in a Docker container.
      # Because I've used encapsulation to put all the MySQL-specific settings within that file,
      #  the rest of the code base doesn't have to change whether the app is in Docker or not.
      APP_ENV: docker
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    links:
      - db

  db:
    # Just going with a recent MySQL image, but specifying a version so it'll continue to work
    image: mysql:9.0.1
    restart: always
    # Compare this to the other docker-compose file:
    #  When both MySQL and Flask are running in containers, they communicate
    #  over Docker's virtual network interface, so we don't map any of the
    #  container's ports to any ports on the localhost interface.
    environment:
      # Password needs to match what's in mysql_repo.py
      MYSQL_ROOT_PASSWORD: strongpassword
    volumes:
      - ./data:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 10s
      timeout: 10s
      retries: 10
